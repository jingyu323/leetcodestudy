package rain.test.study20200112;

/**
 * 深度优先遍历（DFS）
 * 它从图中某个结点v出发，访问此顶点，然后从v的未被访问的邻接点出发深度优先遍历图，
 * 直至图中所有和v有路径相通的顶点都被访问到。
 * 若图中尚有顶点未被访问，则另选图中一个未曾被访问的顶点作起始点，
 * 重复上述过程，直至图中的所有顶点都被访问到为止
 * 基本实现思想：
 * <p>
 * （1）访问顶点v；
 * <p>
 * （2）从v的未被访问的邻接点中选取一个顶点w，从w出发进行深度优先遍历；
 * <p>
 * （3）重复上述两步，直至图中所有和v有路径相通的顶点都被访问到。
 * <p>
 * 递归实现
 * <p>
 * （1）访问顶点v；visited[v]=1；//算法执行前visited[n]=0
 * <p>
 * （2）w=顶点v的第一个邻接点；
 * <p>
 * （3）while（w存在）  
 * <p>
 *            if（w未被访问）
 * <p>
 *                    从顶点w出发递归执行该算法； 
 *            w=顶点v的下一个邻接点；
 * <p>
 * 1）栈S初始化；visited[n]=0；
 * <p>
 *  （2）访问顶点v；visited[v]=1；顶点v入栈S
 * <p>
 *  （3）while(栈S非空)
 * <p>
 *             x=栈S的顶元素(不出栈)；
 * <p>
 *             if(存在并找到未被访问的x的邻接点w)
 * <p>
 *                     访问w；visited[w]=1；  // 查找规则
 * <p>
 *                     w进栈;
 * <p>
 *             else
 * <p>
 *                      x出栈；
 */

public class GraphDfs {
}
